#!/usr/bin/python

import sys
from pathlib import Path
from functools import reduce

from analysis import (
    extract_includes,
    is_of_light,
    definition_files_of,
    light_home,
)

include_dirs = [light_home / "include"]

def find_header(header):
    for d in include_dirs:
        # hp: path of header
        hp = d / header
        if hp.exists():
            return hp.absolute()
    return None

def definition_files_related_to(file):
    # q: queue, hds: headers
    q = {file}
    hds = set()

    while q != set():
        f = q.pop()
        for hd in extract_includes(f):
            p = find_header(hd)
            if p is None:
                continue
            if hd not in hds:
                q.add(p)
            if is_of_light(p):
                hds.add(hd)
    return reduce(lambda l1, l2: l1+l2,
                  map(lambda hd: definition_files_of(hd), hds),
                  [])

if __name__ == "__main__":
    include_dirs += list(filter(lambda p: p.is_dir(), map(Path, sys.argv[2:])))
    file_to_analyze = sys.argv[1]
    # incs: includes, deffs: definition files
    deffs = definition_files_related_to(file_to_analyze)

    print(" ".join(deffs))
